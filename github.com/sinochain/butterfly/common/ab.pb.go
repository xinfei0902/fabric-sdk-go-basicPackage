// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ab.proto

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	ab.proto

It has these top-level messages:
	Envelope
*/
package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// These status codes are intended to resemble selected HTTP status codes
type Status int32

const (
	Status_UNKNOWN                  Status = 0
	Status_SUCCESS                  Status = 200
	Status_BAD_REQUEST              Status = 400
	Status_FORBIDDEN                Status = 403
	Status_NOT_FOUND                Status = 404
	Status_REQUEST_ENTITY_TOO_LARGE Status = 413
	Status_INTERNAL_SERVER_ERROR    Status = 500
	Status_NOT_IMPLEMENTED          Status = 501
	Status_SERVICE_UNAVAILABLE      Status = 503
	// 2018/08/15 Tsing + 2
	// add timeout status
	Status_REQUEST_TIMEOUT Status = 2001
	// add no client statuc
	Status_NO_CLIENT Status = 2002
)

var Status_name = map[int32]string{
	0:    "UNKNOWN",
	200:  "SUCCESS",
	400:  "BAD_REQUEST",
	403:  "FORBIDDEN",
	404:  "NOT_FOUND",
	413:  "REQUEST_ENTITY_TOO_LARGE",
	500:  "INTERNAL_SERVER_ERROR",
	501:  "NOT_IMPLEMENTED",
	503:  "SERVICE_UNAVAILABLE",
	2001: "REQUEST_TIMEOUT",
	2002: "NO_CLIENT",
}
var Status_value = map[string]int32{
	"UNKNOWN":                  0,
	"SUCCESS":                  200,
	"BAD_REQUEST":              400,
	"FORBIDDEN":                403,
	"NOT_FOUND":                404,
	"REQUEST_ENTITY_TOO_LARGE": 413,
	"INTERNAL_SERVER_ERROR":    500,
	"NOT_IMPLEMENTED":          501,
	"SERVICE_UNAVAILABLE":      503,
	"REQUEST_TIMEOUT":          2001,
	"NO_CLIENT":                2002,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Envelope struct {
	Status  Status   `protobuf:"varint,1,opt,name=status,enum=common.Status" json:"status,omitempty"`
	Info    string   `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Channel string   `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	Seqnum  uint64   `protobuf:"varint,4,opt,name=seqnum" json:"seqnum,omitempty"`
	Elapsed int64    `protobuf:"varint,5,opt,name=elapsed" json:"elapsed,omitempty"`
	Tag     []string `protobuf:"bytes,6,rep,name=tag" json:"tag,omitempty"`
	Payload []byte   `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
	// 2018/08/25 Tsing + 2 add execute begin time and end time
	BeginTime uint64 `protobuf:"varint,8,opt,name=beginTime" json:"beginTime,omitempty"`
	EndTime   uint64 `protobuf:"varint,9,opt,name=endTime" json:"endTime,omitempty"`
}

func (m *Envelope) Reset()                    { *m = Envelope{} }
func (m *Envelope) String() string            { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()               {}
func (*Envelope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Envelope) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNKNOWN
}

func (m *Envelope) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *Envelope) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Envelope) GetSeqnum() uint64 {
	if m != nil {
		return m.Seqnum
	}
	return 0
}

func (m *Envelope) GetElapsed() int64 {
	if m != nil {
		return m.Elapsed
	}
	return 0
}

func (m *Envelope) GetTag() []string {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *Envelope) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Envelope) GetBeginTime() uint64 {
	if m != nil {
		return m.BeginTime
	}
	return 0
}

func (m *Envelope) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Envelope)(nil), "common.Envelope")
	proto.RegisterEnum("common.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CloudBD service

type CloudBDClient interface {
	Broadcast(ctx context.Context, opts ...grpc.CallOption) (CloudBD_BroadcastClient, error)
	Deliver(ctx context.Context, opts ...grpc.CallOption) (CloudBD_DeliverClient, error)
}

type cloudBDClient struct {
	cc *grpc.ClientConn
}

func NewCloudBDClient(cc *grpc.ClientConn) CloudBDClient {
	return &cloudBDClient{cc}
}

func (c *cloudBDClient) Broadcast(ctx context.Context, opts ...grpc.CallOption) (CloudBD_BroadcastClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudBD_serviceDesc.Streams[0], c.cc, "/common.CloudBD/Broadcast", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudBDBroadcastClient{stream}
	return x, nil
}

type CloudBD_BroadcastClient interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type cloudBDBroadcastClient struct {
	grpc.ClientStream
}

func (x *cloudBDBroadcastClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cloudBDBroadcastClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudBDClient) Deliver(ctx context.Context, opts ...grpc.CallOption) (CloudBD_DeliverClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudBD_serviceDesc.Streams[1], c.cc, "/common.CloudBD/Deliver", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudBDDeliverClient{stream}
	return x, nil
}

type CloudBD_DeliverClient interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type cloudBDDeliverClient struct {
	grpc.ClientStream
}

func (x *cloudBDDeliverClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cloudBDDeliverClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CloudBD service

type CloudBDServer interface {
	Broadcast(CloudBD_BroadcastServer) error
	Deliver(CloudBD_DeliverServer) error
}

func RegisterCloudBDServer(s *grpc.Server, srv CloudBDServer) {
	s.RegisterService(&_CloudBD_serviceDesc, srv)
}

func _CloudBD_Broadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudBDServer).Broadcast(&cloudBDBroadcastServer{stream})
}

type CloudBD_BroadcastServer interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type cloudBDBroadcastServer struct {
	grpc.ServerStream
}

func (x *cloudBDBroadcastServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cloudBDBroadcastServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CloudBD_Deliver_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudBDServer).Deliver(&cloudBDDeliverServer{stream})
}

type CloudBD_DeliverServer interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type cloudBDDeliverServer struct {
	grpc.ServerStream
}

func (x *cloudBDDeliverServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cloudBDDeliverServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CloudBD_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.CloudBD",
	HandlerType: (*CloudBDServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Broadcast",
			Handler:       _CloudBD_Broadcast_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Deliver",
			Handler:       _CloudBD_Deliver_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ab.proto",
}

func init() { proto.RegisterFile("ab.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcb, 0x8e, 0xd3, 0x30,
	0x14, 0x86, 0xc7, 0xa4, 0x24, 0xcd, 0x99, 0x51, 0x6b, 0x99, 0x8b, 0xac, 0x11, 0x48, 0xd1, 0x2c,
	0x50, 0xc4, 0xa2, 0x42, 0x33, 0xe2, 0x01, 0x72, 0xf1, 0xa0, 0x88, 0xd4, 0x01, 0xc7, 0x19, 0xc4,
	0x2a, 0x4a, 0x1b, 0x33, 0x54, 0x4a, 0x93, 0xd2, 0xa4, 0x23, 0xf1, 0x16, 0x48, 0xb0, 0xe5, 0x7d,
	0xd8, 0xc2, 0x43, 0xf0, 0x04, 0x5c, 0xb6, 0x28, 0x6e, 0x23, 0x16, 0x6c, 0xd8, 0x9d, 0xef, 0x3f,
	0xff, 0xf1, 0x6f, 0xeb, 0x18, 0xc6, 0xc5, 0x62, 0xb6, 0xd9, 0x36, 0x5d, 0x43, 0xcc, 0x65, 0xb3,
	0x5e, 0x37, 0xf5, 0xd9, 0x2f, 0x04, 0x63, 0x56, 0xdf, 0xa8, 0xaa, 0xd9, 0x28, 0xf2, 0x08, 0xcc,
	0xb6, 0x2b, 0xba, 0x5d, 0x4b, 0x91, 0x83, 0xdc, 0xc9, 0xf9, 0x64, 0xb6, 0x77, 0xcd, 0x52, 0xad,
	0x8a, 0x43, 0x97, 0x10, 0x18, 0xad, 0xea, 0x37, 0x0d, 0xbd, 0xe5, 0x20, 0xd7, 0x16, 0xba, 0x26,
	0x14, 0xac, 0xe5, 0xdb, 0xa2, 0xae, 0x55, 0x45, 0x0d, 0x2d, 0x0f, 0x48, 0xee, 0x83, 0xd9, 0xaa,
	0x77, 0xf5, 0x6e, 0x4d, 0x47, 0x0e, 0x72, 0x47, 0xe2, 0x40, 0xfd, 0x84, 0xaa, 0x8a, 0x4d, 0xab,
	0x4a, 0x7a, 0xdb, 0x41, 0xae, 0x21, 0x06, 0x24, 0x18, 0x8c, 0xae, 0xb8, 0xa6, 0xa6, 0x63, 0xb8,
	0xb6, 0xe8, 0xcb, 0xde, 0xbb, 0x29, 0xde, 0x57, 0x4d, 0x51, 0x52, 0xcb, 0x41, 0xee, 0x89, 0x18,
	0x90, 0x3c, 0x00, 0x7b, 0xa1, 0xae, 0x57, 0xb5, 0x5c, 0xad, 0x15, 0x1d, 0xeb, 0x80, 0xbf, 0x82,
	0xce, 0xa8, 0x4b, 0xdd, 0xb3, 0x75, 0x6f, 0xc0, 0xc7, 0xdf, 0x11, 0x98, 0xfb, 0x67, 0x91, 0x63,
	0xb0, 0x32, 0xfe, 0x9c, 0x27, 0xaf, 0x38, 0x3e, 0x22, 0x27, 0x60, 0xa5, 0x59, 0x10, 0xb0, 0x34,
	0xc5, 0x5f, 0x10, 0xc1, 0x70, 0xec, 0x7b, 0x61, 0x2e, 0xd8, 0xcb, 0x8c, 0xa5, 0x12, 0x7f, 0x30,
	0xc8, 0x04, 0xec, 0xcb, 0x44, 0xf8, 0x51, 0x18, 0x32, 0x8e, 0x3f, 0x6a, 0xe6, 0x89, 0xcc, 0x2f,
	0x93, 0x8c, 0x87, 0xf8, 0x93, 0x41, 0x1e, 0x02, 0x3d, 0xb8, 0x73, 0xc6, 0x65, 0x24, 0x5f, 0xe7,
	0x32, 0x49, 0xf2, 0xd8, 0x13, 0xcf, 0x18, 0xfe, 0x6c, 0x90, 0x53, 0xb8, 0x17, 0x71, 0xc9, 0x04,
	0xf7, 0xe2, 0x3c, 0x65, 0xe2, 0x8a, 0x89, 0x9c, 0x09, 0x91, 0x08, 0xfc, 0xc3, 0x20, 0x77, 0x61,
	0xda, 0x1f, 0x15, 0xcd, 0x5f, 0xc4, 0x6c, 0xce, 0xb8, 0x64, 0x21, 0xfe, 0x69, 0x10, 0x0a, 0x77,
	0x7a, 0x63, 0x14, 0xb0, 0x3c, 0xe3, 0xde, 0x95, 0x17, 0xc5, 0x9e, 0x1f, 0x33, 0xfc, 0x5b, 0xfb,
	0x87, 0x28, 0x19, 0xcd, 0x59, 0x92, 0x49, 0xfc, 0x75, 0xba, 0xbf, 0x50, 0x1e, 0xc4, 0x11, 0xe3,
	0x12, 0x7f, 0x9b, 0x9e, 0xef, 0xc0, 0x0a, 0xaa, 0x66, 0x57, 0xfa, 0x21, 0x79, 0x0a, 0xb6, 0xbf,
	0x6d, 0x8a, 0x72, 0x59, 0xb4, 0x1d, 0xc1, 0xc3, 0x72, 0x87, 0xf5, 0x9f, 0xfe, 0xa3, 0x9c, 0x1d,
	0xb9, 0xe8, 0x09, 0x22, 0x17, 0x60, 0x85, 0xaa, 0x5a, 0xdd, 0xa8, 0xed, 0xff, 0x0f, 0x2d, 0x4c,
	0xfd, 0xcf, 0x2e, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x55, 0x26, 0xa1, 0x73, 0x02, 0x00,
	0x00,
}
